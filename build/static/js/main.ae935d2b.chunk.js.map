{"version":3,"sources":["Assets/Background.png","Assets/music.mp3","Assets/Shooter.gif","Menu.js","Welcome.js","About.js","Play.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Flexbox","styled","div","Button","a","Menu","to","Component","Welc","img","Shooter","Player","audio","Welcome","src","require","controls","autoplay","preload","loop","About","Play","App","fetch","method","then","response","ok","Error","statusText","json","data","console","log","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,wC,iGCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,wtBCI3C,IAAMC,EAAUC,IAAOC,IAAV,KAOPC,EAASF,IAAOG,EAAV,KA2BGC,EAXf,uKAEQ,OACI,kBAACL,EAAD,KACI,kBAAC,IAAD,CAAMM,GAAG,SAAQ,kBAACH,EAAD,cACjB,kBAAC,IAAD,CAAMG,GAAG,UAAS,kBAACH,EAAD,oBALlC,GAA0BI,a,skBCrB1B,IAAMC,EAAOP,IAAOC,IAAV,IAMkBO,KAGtBC,EAAUT,IAAOQ,IAAV,KAQPE,EAASV,IAAOW,MAAV,KAoBGC,EAdf,uKAEQ,OACI,6BACI,kBAACF,EAAD,CAAQG,IAAKC,EAAQ,IAAuBC,UAAQ,EAACC,UAAQ,EAACC,QAAQ,OAAOC,MAAI,IACjF,kBAACT,EAAD,CAASI,IAAKC,EAAQ,MACtB,kBAACP,EAAD,KACI,kBAAC,EAAD,YAPpB,GAA6BD,aChBda,MARf,WACE,OACI,wD,MCQSC,MAVf,WACE,OACI,wD,OCuBSC,MAvBf,WAYE,OAXAC,MAAM,uCAAwC,CAC5CC,OAAQ,QAEPC,MAAK,SAACC,GACL,IAAKA,EAASC,GAAI,MAAMC,MAAMF,EAASG,YACvC,OAAOH,EAASI,UAEjBL,MAAK,SAACM,GACLC,QAAQC,IAAIF,MAId,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOsB,KAAK,SAASC,UAAWhB,IAChC,kBAAC,IAAD,CAAOe,KAAK,QAAQC,UAAWf,OCZnBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.ae935d2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Background.95c8acac.png\";","module.exports = __webpack_public_path__ + \"static/media/music.eef7eea1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Shooter.f72eb643.gif\";","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport {Link} from \"react-router-dom\";\n\nconst Flexbox = styled.div`\n    display: flex; \n    flex-direction: column;\n    height: 50%\n    align-items: center; \n    align-content: center; \n`;\nconst Button = styled.a`\n    background-color: black;\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    width: 200px;\n    max-width: 300px;\n`;\n\n\nexport class Menu extends Component {\n    render() {\n        return (\n            <Flexbox>\n                <Link to=\"/play\"><Button>Play</Button></Link>\n                <Link to=\"/about\"><Button>About</Button></Link>\n            </Flexbox>\n        );\n    }\n}\n\nexport default Menu;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport img from './Assets/Background.png';\nimport Menu from './Menu';\n\n\nconst Welc = styled.div`\n    display: flex; \n    justify-content: center;\n    align-items: center;\n    align-content: center;\n    height: 100vh;\n    background-image: url(${img});\n    background-size: cover\n`;\nconst Shooter = styled.img`\n    width: 10%;\n    height: auto;\n    min-width: 100px;\n    position: absolute;\n    bottom: 10vh;\n    left: 10vh;\n`;\nconst Player = styled.audio`\n    position: fixed; \n    width: 300px;\n    margin: 20px;\n\n`;\nexport class Welcome extends Component {\n    render() {\n        return (\n            <div>\n                <Player src={require(\"./Assets/music.mp3\")} controls autoplay preload=\"auto\" loop></Player>\n                <Shooter src={require(\"./Assets/Shooter.gif\")} />\n                <Welc>\n                    <Menu />\n                </Welc>\n            </div>\n        );\n    }\n}\n\nexport default Welcome;\n","\nimport React from 'react'\nimport {Link} from 'react-router'\nimport { withRouter, Router, NavLink, Route, Switch, useLocation } from 'react-router-dom';\n\nfunction About() {\n  return (\n      <div>professional resumesss</div>\n  );\n}\n\n\n\nexport default About\n","import \"./Play.css\"\nimport React from 'react';\nimport {Link} from \"react-router-dom\";\nimport { withRouter, Router, NavLink, Route, Switch, useLocation } from 'react-router-dom';\n\nfunction Play() {\n  return (\n      <div>professional resumesss\n\n      </div>\n  );\n}\n\n\n\nexport default Play\n","import React from 'react';\nimport './App.css';\nimport Welcome from \"./Welcome\";\nimport About from \"./About\";\nimport Play from \"./Play\";\nimport { BrowserRouter,Switch,Route } from \"react-router-dom\";\n\nfunction App() {\n  fetch(\"http://yeehaw-backend.herokuapp.com/\", {\n    method: \"GET\",\n  })\n    .then((response) => {\n      if (!response.ok) throw Error(response.statusText);\n      return response.json();\n    })\n    .then((data) => {\n      console.log(data)\n    })\n\n  return (\n    <BrowserRouter>\n      <Switch >\n        <Route exact path=\"/\" component={Welcome} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/play\" component={Play} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}